input {
  # Читаем логи с frontend-сервера (NGINX)
  file {
    path => "/nginx_logs/access.log"
    type => "nginx_access"
    start_position => "beginning"
    sincedb_path => "/dev/null"  # Всегда обрабатываем весь файл в лабораторной среде
    tags => ["nginx", "frontend"]
  }
  
  file {
    path => "/nginx_logs/error.log"
    type => "nginx_error"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["nginx", "frontend", "error"]
  }
  
  # Читаем логи с backend-сервера (Node.js)
  file {
    path => "/app_logs/combined.log"
    type => "nodejs_combined"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["nodejs", "backend"]
  }
  
  file {
    path => "/app_logs/raw_requests.log"
    type => "nodejs_raw_requests"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["nodejs", "backend", "raw_request"]
  }
  
  # Читаем логи интерфейса лаборатории
  file {
    path => "/interface_logs/combined.log"
    type => "interface_combined"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["interface"]
  }
  
  file {
    path => "/interface_logs/error.log"
    type => "interface_error"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["interface", "error"]
  }
}

filter {
  # Добавляем общую метку для всех логов HTTP smuggling
  mutate {
    add_field => { "lab_environment" => "http_smuggling" }
  }
  
  # Обрабатываем логи доступа NGINX
  if [type] == "nginx_access" {
    grok {
      match => { "message" => '%{IPORHOST:remote_addr} - %{USER:remote_user} \[%{HTTPDATE:time_local}\] "%{WORD:request_method} %{URIPATHPARAM:request_uri} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:body_bytes_sent} "%{DATA:http_referer}" "%{DATA:http_user_agent}" rt=%{NUMBER:request_time} uct="%{DATA:upstream_connect_time}" uht="%{DATA:upstream_header_time}" urt="%{DATA:upstream_response_time}" cl=%{DATA:content_length} te=%{DATA:transfer_encoding}' }
    }
    
    # Конвертируем временную метку
    date {
      match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
    }
    
    # Устанавливаем источник сервера
    mutate {
      add_field => { "server" => "frontend" }
    }
    
    # Пытаемся извлечь информацию о сессии из заголовков
    if [message] =~ "X-Session-ID:" {
      grok {
        match => { "message" => 'X-Session-ID: %{DATA:sessionId}' }
      }
    }
    
    if [message] =~ "X-Username:" {
      grok {
        match => { "message" => 'X-Username: %{DATA:username}' }
      }
    }
    
    # Определяем потенциальные признаки HTTP Request Smuggling
    if [content_length] != "-" and [transfer_encoding] != "-" {
      mutate {
        add_field => { "smuggling_indicator" => "both_cl_te_present" }
      }
    }
    
    if [request_uri] =~ "/admin" {
      mutate {
        add_field => { "suspicious_access" => "admin_access_attempt" }
      }
    }
  }
  
  # Обрабатываем логи ошибок NGINX
  else if [type] == "nginx_error" {
    grok {
      match => { "message" => "%{DATA:time} \[%{DATA:level}\] %{GREEDYDATA:error_message}" }
    }
    
    mutate {
      add_field => { "server" => "frontend" }
    }
  }
  
  # Обрабатываем логи Node.js
  else if [type] =~ "nodejs_.*" {
    json {
      source => "message"
    }
    
    # Устанавливаем источник сервера
    mutate {
      add_field => { "server" => "backend" }
    }
    
    # Извлекаем информацию о сессии, если есть
    if [sessionId] {
      mutate {
        add_field => { "session_info" => "session_tracked" }
      }
    }
    
    # Определяем потенциальные признаки HTTP Request Smuggling
    if [headers] {
      if [headers][content-length] and [headers][transfer-encoding] {
        mutate {
          add_field => { "smuggling_indicator" => "both_cl_te_present" }
        }
      }
      
      # Множественные заголовки Transfer-Encoding
      if [message] =~ "Transfer-Encoding:.*Transfer-Encoding:" {
        mutate {
          add_field => { "smuggling_indicator" => "multiple_te_headers" }
        }
      }
    }
    
    # Для raw requests нам интересно содержимое запроса
    if [type] == "nodejs_raw_requests" and [rawBody] {
      # Ищем признаки chunked encoding
      if [rawBody] =~ "0\r\n\r\n" or [rawBody] =~ "0\n\n" {
        mutate {
          add_field => { "smuggling_indicator" => "chunked_encoding_terminator" }
        }
      }
    }
  }
  
  # Обрабатываем логи интерфейса лаборатории
  else if [type] =~ "interface_.*" {
    json {
      source => "message"
    }
    
    # Устанавливаем источник сервера
    mutate {
      add_field => { "server" => "interface" }
    }
    
    # Обрабатываем логи с информацией о сессии
    if [sessionId] {
      mutate {
        add_field => { "session_tracked" => true }
      }
    }
    
    # Отслеживаем события отправки HTTP запросов
    if [message] =~ "Sending HTTP request" {
      mutate {
        add_field => { "event_type" => "http_request_sent" }
      }
      
      # Определяем тип атаки, если указан
      if [attackType] {
        mutate {
          add_field => { "attack_type" => "%{attackType}" }
        }
      }
      
      # Ищем признаки HTTP Request Smuggling в содержимом запроса
      if [requestContent] =~ "Content-Length:.*Transfer-Encoding:" or [requestContent] =~ "Transfer-Encoding:.*Content-Length:" {
        mutate {
          add_field => { "smuggling_indicator" => "both_cl_te_present" }
        }
      }
      
      if [requestContent] =~ "Transfer-Encoding:.*Transfer-Encoding:" {
        mutate {
          add_field => { "smuggling_indicator" => "multiple_te_headers" }
        }
      }
      
      if [requestContent] =~ "0\r\n\r\n" or [requestContent] =~ "0\n\n" {
        mutate {
          add_field => { "smuggling_indicator" => "chunked_encoding_terminator" }
        }
      }
    }
  }
}

output {
  # Отправляем всё в Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "http_smuggling_lab-%{+YYYY.MM.dd}"
  }
  
  # Для отладки выводим логи в stdout
  stdout {
    codec => rubydebug
  }
}